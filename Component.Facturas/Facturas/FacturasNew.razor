@using AutoMapper;
@using CommonBase.Dtos.Facturas;
@using CommonBase.Dtos.Errors;
@using CommonBase.Dtos.Productos;
@using CommonBase.Dtos.Terceros;
@using CommonBase.Dtos.TipoMovimiento;
@using CommonBase.Extensions;
@using CommonBase.Dtos.TipoPago;
@using CommonBase.Dtos.EstadoEntrega;
@using CommonBase.Services.EstadoEntregaService;
@using CommonBase.Services.Factura;
@using CommonBase.Services.TercerosSevice;
@using CommonBase.Services.TipoPagoService;
@using System.Globalization;
@using System.Text.Json;
@inject TercerosService tercerosService
@inject EstadoEntregaService estadoEntregaService
@inject TipoPagoService tipoPagoService
@inject IFacturaService facturaService
@inject IMapper mapper
<PageTitle>Facturas</PageTitle>

@if (TipoMovimiento == "COMPRA")
{
    <PageTitle>Compras</PageTitle>

    <h3>Actualiza o crea nueva Compra</h3>

}
else
{
    <PageTitle>Ventas</PageTitle>

    <h3>Actualiza o crea nueva Venta</h3>

}

@if (Terceros is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <RadzenTemplateForm Data="@Factura" Submit="@((FacturaSaveModel args) => { GuardarFactura(args); })">

        <div Class="rz-p-0 rz-p-md-12">
            <RadzenFieldset Text="Cabecera de la Factura" Icon="receipt" Style="margin-top: 0px;">
                <RadzenRow Gap="1rem">
                    <RadzenColumn Size="12" SizeSM="6">
                        <RadzenStack>
                            <RadzenFormField Text="Fecha" Variant="@variant">
                                <RadzenDatePicker TValue="DateTime"
                                              DateFormat="yyyy-MM-dd"
                                              Placeholder="Fecha factura"
                                              @bind-Value=@dtFactura
                                              Name="DropDownFechaFactura"
                                              Change=@(args => ChangeFechaFactura(args)) 
                                              Disabled="isReadonly"
                                              />
                                <RadzenRequiredValidator Component="DropDownFechaFactura" Text="Fecha factura requerida" Popup=@popup Style="position: absolute" />
                            </RadzenFormField>

                            <RadzenFormField Text="@LabelTercero" Variant="@variant">
                                <RadzenDropDown FilterOperator="StringFilterOperator.Contains"
                                            AllowFiltering="true"
                                            Data=@Terceros
                                            TValue="TercerosDto"
                                            TextProperty="Name"
                                            AllowClear="true"
                                            @bind-Value=currentTercero
                                            Style="width: 100%; max-width: 100%;"
                                            Name="DropDownTerceros"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" 
                                            Disabled="isReadonly" />
                                <RadzenRequiredValidator Component="DropDownTerceros" Text="Tercero requerido" Popup=@popup Style="position: absolute" />
                            </RadzenFormField>
                            @if (isCredito)
                            {
                                <RadzenFormField Text="Dias para vencer" Variant="@variant">
                                    <RadzenNumeric Name="DiasVencer" 
                                        TValue="int" 
                                        @bind-Value=@DiasVencer
                                        Change=@(args => ChangeDiasVencimiento(args)) 
                                        TextAlign="TextAlign.Right" Min="0" I
                                        nputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})"
                                           Disabled="isReadonly" />
                                    <RadzenRequiredValidator Component="DiasVencer" Text="Dias vencimiento requerido" Popup=@popup Style="position: absolute" />

                                </RadzenFormField>
                            }

                        </RadzenStack>
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeSM="6">
                        <RadzenStack>
                            <RadzenFormField Text="Estado" Variant="@variant">
                                <RadzenDropDown FilterOperator="StringFilterOperator.Contains"
                                            AllowFiltering="true"
                                            Data=@estadoEntregas
                                            TValue="EstadoEntregaDto"
                                            TextProperty="Name"
                                            AllowClear="true"
                                            @bind-Value=currentEstadoEntrega
                                            Style="width: 100%; max-width: 100%;"
                                            Name="DropDownEstadoEntrega"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                             />
                                <RadzenRequiredValidator Component="DropDownEstadoEntrega" Text="Estado requerido" Popup=@popup Style="position: absolute" />
                            </RadzenFormField>

                            <RadzenFormField Text="Tipo de Pago" Variant="@variant">
                                <RadzenDropDown FilterOperator="StringFilterOperator.Contains"
                                            AllowFiltering="true"
                                            Data=@tipoPagos
                                            TValue="TipoPagoDto"
                                            TextProperty="Name"
                                            AllowClear="true"
                                            @bind-Value=currentTipoPago
                                            Style="width: 100%; max-width: 100%;"
                                            Name="DropDownTipoPago"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            SelectedItemChanged="@(args => ChangeTipoPago(args))" 
                                            Disabled="isReadonly" />
                                <RadzenRequiredValidator Component="DropDownTipoPago" Text="Tipo de pago requerido" Popup=@popup Style="position: absolute" />
                            </RadzenFormField>
                            @if (isCredito)
                            {
                                <RadzenFormField Text="Fecha Vencimiento" Variant="@variant">
                                    <RadzenDatePicker TValue="DateTime"
                                              DateFormat="yyyy-MM-dd"
                                              Min="@dtFactura"
                                              Placeholder="Fecha Vencimiento"
                                              @bind-Value=@dtVencimientoFactura
                                              Name="DtFechaVencimiento"
                                              Change=@(args => ChangeFechaVencimientoFactura(args)) 
                                              Disabled="isReadonly" />
                                    <RadzenRequiredValidator Component="DtFechaVencimiento" Text="Fecha vencimiento requerida" Popup=@popup Style="position: absolute" />
                                </RadzenFormField>
                            }


                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>
            </RadzenFieldset>
        </div>

        <div class="rz-p-12 rz-text-align-right" style="margin-top: -26px">
            <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.End" Gap="10">

                <RadzenButton Visible="@IsVisibleReadOnly()" Click=@(args => ShowInlineDialog()) Text="Agregar Producto" Icon="add" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Medium" />
            </RadzenStack>
        </div>


        @if (detalleFacturaUI.Count > 0)
        {
            <RadzenFieldset Text="Detalle de la Factura" Icon="fact_check" Style="margin-top: -36px;">
                <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="10">
                    <RadzenBadge Style="font-size: medium;"
                         BadgeStyle="BadgeStyle.Secondary"
                         Shade="Shade.Lighter"
                                 class="price-badge"
                         Text=@($"{String.Format(new System.Globalization.CultureInfo("en-US"), "Total Factura: {0:C}",totalFactura)}") />
                </RadzenStack>
                <RadzenDataList IsLoading=@isLoading
                        Data="@detalleFacturaUI"
                        TItem="DetalleFacturaSaveUIModel"
                        PagerHorizontalAlign="HorizontalAlign.Left"
                        ShowPagingSummary="true">
                    <Template Context="detalleFacturaUI">
                        <RadzenCard Style="width: 100%; padding: 0;">
                            <RadzenRow Gap="0">
                                <RadzenColumn Size="12" SizeLG="4" Class="rz-p-4 product-title">
                                    <RadzenRow>
                                        <RadzenColumn>
                                            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
                                                <RadzenLink Text="Go to url"><RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-color-secondary">@(detalleFacturaUI.Name)</RadzenText>  </RadzenLink>
                                                </RadzenStack>
                                            </RadzenColumn>
                                            <RadzenColumn>
                                                <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.End" Gap="0">
                                                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" Gap="8">
                                                        <button type="button" onclick="@(()=> Detete(detalleFacturaUI))" class="btn btn-danger"><spam class="fa fa-trash-o" aria-hidden="true"></spam></button>
                                                    </RadzenStack>
                                                </RadzenStack>
                                            </RadzenColumn>
                                        </RadzenRow>

                                    </RadzenColumn>
                                    <RadzenColumn Size="12" SizeLG="7" Class="rz-p-4">
                                        <RadzenRow Gap="1">
                                            <RadzenColumn Size="12" SizeMD="3" SizeLG="3">
                                                <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" Class="rz-mb-0">Cantidad:</RadzenText>
                                                <RadzenText TextStyle="TextStyle.Body2">@(detalleFacturaUI.cantidad)</RadzenText>
                                            </RadzenColumn>
                                            @if (isCredito)
                                        {
                                            <RadzenColumn Size="12" SizeMD=" 6" SizeLG="2">
                                                <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" Class="rz-mb-0">Costo:</RadzenText>
                                                <RadzenText TextStyle="TextStyle.Body2">@(detalleFacturaUI.costo)</RadzenText>
                                                </RadzenColumn>
                                        }
                                        <RadzenColumn Size="12" SizeMD="6" SizeLG="3" Class="rz-text-align-start rz-text-align-lg-end">
                                            <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" Class="rz-mb-0">Vlr Unitario:</RadzenText>
                                            <RadzenBadge BadgeStyle="BadgeStyle.Secondary" Shade="Shade.Lighter" class="price-badge" Text=@($"{String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}",detalleFacturaUI.pvp)}") />
                                        </RadzenColumn>
                                        <RadzenColumn Size="12" SizeMD="6" SizeLG="4" Class="rz-text-align-start rz-text-align-lg-end">
                                            <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" Class="rz-mb-0">Sub Total:</RadzenText>
                                            <RadzenBadge BadgeStyle="BadgeStyle.Secondary" Shade="Shade.Lighter" class="price-badge" Text=@($"{String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}",detalleFacturaUI.Subtotal)}") />
                                        </RadzenColumn>
                                    </RadzenRow>
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenCard>
                    </Template>
                </RadzenDataList>
            </RadzenFieldset>

            <div class="rz-p-12 rz-text-align-center">

                <RadzenButton style="width: 160px;"  Icon="save" BusyText="Guardando ..." IsBusy=@busy ButtonType="ButtonType.Submit" Text="Guardar" />
                <RadzenButton style="width: 160px;" Icon="cancel" Text="Regresar" Click="@Cancel" ButtonStyle="ButtonStyle.Light" />

            </div>
        }
    </RadzenTemplateForm>

}
<style>
    .product-title {
        min-height: 72px;
        background-color: var(--rz-secondary-lighter);
    }

    .price-badge {
        font-size: 16px;
        font-weight: bold;
        line-height: 20px;
        padding: 8px;
    }
</style>

@code {
    [Parameter]
    public int? id { get; set; }

    [Parameter]
    public string? TipoMovimiento { get; set; }

    Variant variant = Variant.Outlined;
    bool popup = true;
    bool isReadonly = false;
    private List<ProductosFacturaDto> productos;
    private ProductosFacturaDto currentProducto;

    private List<TercerosDto> Terceros;
    private TercerosDto currentTercero;

    private List<EstadoEntregaDto> estadoEntregas;
    private EstadoEntregaDto currentEstadoEntrega;

    private List<TipoPagoDto> tipoPagos;
    private TipoPagoDto currentTipoPago;

    public List<TipoMovimientoDto>? TiposMov;


    bool busy;
    private DateTime dtFactura;
    private DateTime dtVencimientoFactura;
    RadzenDropDown<ProductosDto> radzenDropDown;
    private int DiasVencer;
    private decimal Cantidad = 1;
    private decimal Costo;
    private decimal Subtotal;
    private decimal PVP { get; set; }
    private bool isLoading { get; set; }
    private string LabelTercero = "";
    private bool isCredito = false;
    private decimal totalFactura = 0;

    private FacturaSaveModel Factura;
    private List<DetalleFacturaSaveModel>? detalleFactura;
    private List<DetalleFacturaSaveUIModel>? detalleFacturaUI;
    private DetalleFacturaSaveUIModel? currentFacturaUI;
    private FacturaModel facturaToUpdate;
    private bool NotAvailable = false;



    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Factura = new FacturaSaveModel();
        detalleFacturaUI = new List<DetalleFacturaSaveUIModel>();
        detalleFactura = new List<DetalleFacturaSaveModel>();

        dtFactura = DateTime.Now;
        dtVencimientoFactura = DateTime.Now;
        LabelTercero = TipoMovToTipoTercero(TipoMovimiento).ToLower().ToCamelCase();
        var aditionaData = await facturaService.GetAditionalData(TipoMovToTipoTercero(TipoMovimiento));

        Terceros = aditionaData.Terceros;
        estadoEntregas = aditionaData.Estados;
        tipoPagos = aditionaData.TiposPago;
        productos = aditionaData.Productos;
        TiposMov = aditionaData.TipoMov;
        totalFactura = 0;
        PVP = 0;

        if (id != null && id > 0)
        {
            try
            {
                isReadonly = true;
                detalleFacturaUI.Clear();
                facturaToUpdate = await facturaService.GetById((int)id);
                currentTercero = Terceros.FirstOrDefault(x => x.Id == facturaToUpdate.IdTercero);
                currentEstadoEntrega = estadoEntregas.FirstOrDefault(x => x.Id == facturaToUpdate.IdEstadoEntrega);
                currentTipoPago = tipoPagos.FirstOrDefault(x => x.Id == facturaToUpdate.IdTipoPago);
                dtFactura = facturaToUpdate.Fecha;
                DiasVencer = facturaToUpdate.DiasVencimiento;
                dtVencimientoFactura = facturaToUpdate.FechaVencimiento;
                isCredito = false;
                if (currentTipoPago.Code == "CREDITO") isCredito = true;
                facturaToUpdate.Detalle.ForEach(item =>
                    {
                        detalleFacturaUI.Add(new DetalleFacturaSaveUIModel
                                {
                                    cantidad = item.Cantidad,
                                    costo = item.Costo,
                                    idproducto = item.IdProducto,
                                    Name = item.Nombre,
                                    pvp = item.PVP,
                                    Subtotal = item.Cantidad * item.PVP
                                });
                        totalFactura = GetTotalFactura();
                    });

            }
            catch (Exception ex)
            {
                AppUtils.ShowNotify(ex.Message, "ERROR", Ns);
            }

        }
    }

    void ChangeDiasVencimiento(int dias)
    {
        if (dias < DiasVencer) dias = dias * -1;
        dtVencimientoFactura = (dtFactura).AddDays(dias);
        StateHasChanged();

    }


    async void ChangeProducto(object e)
    {
        ProductosFacturaDto selectedProduct = (ProductosFacturaDto)e;
        if (selectedProduct is not null)
        {
            if (selectedProduct.PvP > 0 && TipoMovimiento == "VENTA")
            {
                this.PVP = (decimal)selectedProduct.PvP;

            }




            DialogService.Refresh(); 

        }
    }

    void ChangeTipoPago(object e)
    {
        isCredito = false;

        TipoPagoDto tipoPago = (TipoPagoDto)e;
        if (tipoPago.Code == "CREDITO")
        {
            isCredito = true;
        }
    }

    void ChangeFechaFactura(DateTime? fecha)
    {
        if (fecha is not null)
            dtVencimientoFactura = (DateTime)fecha;

        DiasVencer = 0;

    }

    void ChangeFechaVencimientoFactura(DateTime? fecha)
    {
        if (fecha is not null)
            DiasVencer = ((DateTime)fecha - dtFactura).Days + 1;

        StateHasChanged();
    }

    private void Detete(DetalleFacturaSaveUIModel item)
    {
        detalleFacturaUI.Remove(item);
        totalFactura = GetTotalFactura();
        StateHasChanged();
    }

    private void AddProduct(DetalleFacturaSaveUIModel item)
    {
        if (currentProducto == null)
        {
            AppUtils.ShowNotify("Debe seleccionar un producto!", "WARNING", Ns);
            return;
        }

        if (currentProducto.Id <= 0)
        {
            AppUtils.ShowNotify("Debe seleccionar un producto!", "WARNING", Ns);
            return;
        }

        //NotAvailable = (bool)currentProducto.UseStok && (currentProducto.Cantidad - Cantidad) < 0;
        //if (NotAvailable)
        //{
        //    AppUtils.ShowNotify("El producto no tiene unidades disponibles!", "WARNING", Ns);
        //    return;
        //}



        var existProduct = detalleFacturaUI.FirstOrDefault(x => x.idproducto == currentProducto.Id);
        if (existProduct is not null)
        {
            Cantidad += existProduct.cantidad;
            detalleFacturaUI.Remove(existProduct);
        }
        Subtotal = Cantidad * PVP;

        if (TipoMovimiento == "VENTA")
        {
            Costo = 0;
        }

        detalleFacturaUI.Add(new DetalleFacturaSaveUIModel
                {
                    cantidad = Cantidad,
                    costo = Costo,
                    pvp = PVP,
                    idproducto = currentProducto.Id,
                    Name = currentProducto.Name,
                    Subtotal = Subtotal
                });

        totalFactura = GetTotalFactura();
        Cantidad = 1;
        Costo = 0;
        PVP = 0;
        Subtotal = 0;

        currentFacturaUI = new DetalleFacturaSaveUIModel();
        currentProducto = new ProductosFacturaDto();
        DialogService.Refresh();
        StateHasChanged();
    }

    private async void GuardarFactura(FacturaSaveModel arg)
    {
        busy = true;
        try
        {
            if (detalleFacturaUI.Count <= 0)
            {
                AppUtils.ShowNotify("Debe agregar productos a la factura!", "WARNING", Ns);
                return;
            }

            dtFactura = dtFactura.AddDays(1);
            dtVencimientoFactura = dtVencimientoFactura.AddDays(1);


            var tipoMov = TiposMov.FirstOrDefault(x => x.Code == TipoMovimiento);
            Factura.Id = (id is null ? 0 : (int)id);
            Factura.FechaFactura = dtFactura.ToString("yyyy-MM-dd 00:00:00 -0500");
            Factura.DiasVencimiento = DiasVencer;
            Factura.FechaVencimiento = dtVencimientoFactura.ToString("yyyy-MM-dd 00:00:00 -0500");
            Factura.IdEstadoEntrega = currentEstadoEntrega.Id;
            Factura.IdTipoPago = currentTipoPago.Id;
            Factura.IdTercero = currentTercero.Id;
            Factura.IdTipoMovimiento = tipoMov.Id;
            Factura.Detalle = mapper.Map<List<DetalleFacturaSaveModel>>(detalleFacturaUI);
            await facturaService.SaveOrUpdate(Factura);
            AppUtils.ShowNotify("Información guardada de manera exitosa", "OK", Ns);
            Navigation.NavigateTo($"facturas/{TipoMovimiento}");
        }
        catch (Exception ex)
        {
            string msjError = ex.Message;
            if (ex.Message.Contains("code"))
            {
                var mensaje = JsonSerializer.Deserialize<ErrorFacturaDto>(ex.Message);
                msjError = mensaje.message;
            }
            AppUtils.ShowNotify(msjError, "ERROR", Ns);
        }
        finally

        {
            busy = false;
        }
        StateHasChanged();
    }

    private string TipoMovToTipoTercero(string TipoMovimiento)
    {
        if (TipoMovimiento == "COMPRA")
        {
            return "PROVEEDOR";
        }
        return "CLIENTE";
    }

    void Cancel()
    {
        Navigation.NavigateTo($"facturas/{TipoMovimiento}");
    }
    
    async Task ShowInlineDialog()
    {
        currentFacturaUI = new DetalleFacturaSaveUIModel();
        currentProducto = new ProductosFacturaDto();
        Cantidad = 1;
        Costo = 0;
        PVP = 0;
        DialogService.Refresh();
        var result = await DialogService.OpenAsync("Adicionar Producto", ds =>
    @<RadzenStack Gap="1.5rem">
       
        <RadzenBadge Style="font-size: medium;"
                 BadgeStyle="BadgeStyle.Secondary"
                 Shade="Shade.Lighter"
                 class="price-badge"
                 Text=@($"{String.Format(new System.Globalization.CultureInfo("en-US"), "Total Factura: {0:C}",totalFactura)}") />
        <RadzenTemplateForm Data="@currentFacturaUI" Submit="@((DetalleFacturaSaveUIModel args) => { AddProduct(args); })">
            <RadzenStack Orientation="Orientation.Vertical" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                <RadzenRow Gap="1rem" Style="width:100%">
                    <RadzenColumn Size="12" SizeSM="12">
                        <RadzenStack>
                            <RadzenFormField Text="Producto" Variant="@variant">
                                <RadzenDropDown FilterOperator="StringFilterOperator.Contains"
                                            AllowFiltering="true"
                                            Data=@productos
                                            TValue="ProductosFacturaDto"
                                            TextProperty="Name"
                                            AllowClear="true"
                                                @bind-Value=currentProducto
                                            Style="width: 100%; max-width: 100%;"
                                            Name="DropDownProducto"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            Change="@(args => ChangeProducto(args))"
                                            />

                            </RadzenFormField>
                            <RadzenFormField Text="Cantidad" Variant="@variant">
                                <RadzenNumeric Name="txtCantidad" TValue="decimal" @bind-Value=@Cantidad
                                           TextAlign="TextAlign.Right" Min="1" I
                                           nputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})" />
                                <RadzenRequiredValidator Component="txtCantidad" Text="Cantidad requerida" Popup=@popup Style="position: absolute" />
                                <RadzenNumericRangeValidator Component="txtCantidad" Min="1" Text="Cantidad debe ser mayor a 1" Popup=@popup Style="position: absolute" />
                            </RadzenFormField>
                            @if (TipoMovimiento == "COMPRA")
                            {
                                <RadzenFormField Text="Costo" Variant="@variant">
                                    <RadzenNumeric Name="txtCosto" TValue="decimal" @bind-Value=@Costo
                                           TextAlign="TextAlign.Right" Min="0" I
                                               nputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})" />
                                    <RadzenRequiredValidator Component="txtCosto" Text="Costo requerido" Popup=@popup Style="position: absolute" />
                                    <RadzenNumericRangeValidator Component="txtCosto" Min="1" Text="Costo debe ser mayor a 1" Popup=@popup Style="position: absolute" />
                                </RadzenFormField>
                            }


                            <RadzenFormField Text="Precio de Venta $" Variant="@variant">
                                <RadzenNumeric Name="txtPvp" @bind-Value=@PVP
                                           TextAlign="TextAlign.Right" 
                                           Min="0" 
                                           InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})" />
                                <RadzenRequiredValidator Component="txtPvp" Text="Precio de venta requerido" Popup=@popup Style="position: absolute" />
                                <RadzenNumericRangeValidator Component="txtPvp" Min="1" Text="Precio de venta debe ser mayor a 1" Popup=@popup Style="position: absolute" />
                            </RadzenFormField>
                        </RadzenStack>
                    </RadzenColumn>

                </RadzenRow>
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenButton Text="Ok" ButtonType="ButtonType.Submit" Style="width: 80px;" />
                    <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
                </RadzenStack>
            </RadzenStack>
        </RadzenTemplateForm>
            </RadzenStack>
    );
    }

    private decimal GetTotalFactura()
    {
        var total = detalleFacturaUI.Select(x => x.Subtotal).Sum();
        return total;
    }


    private bool IsVisibleReadOnly()
    {
        return !this.isReadonly;

    }

}
