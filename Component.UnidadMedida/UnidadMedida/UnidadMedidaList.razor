@using CommonBase.Dtos.UnidadMedida;
@using CommonBase.Services.UnidadMedidaService;
@inject UnidadMedidaService unidadMedidaService

<PageTitle>Unidades de medida</PageTitle>

<h2>Unidades de medida</h2>

<p>En esta pagina puedes gestionar los datos de las Unidades de medida.</p>


@if (unidadMedidas == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <RadzenRow>
        <RadzenColumn Size="11">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" Gap="1rem">
                <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="find_in_page" Style="max-width:30%;" Click="@(()=>Buscar())" />
                <RadzenTextBox Placeholder="Buscar..."
                           Style="width:100%!important"
                           @bind-Value="searchCriteria"
                           @oninput=@(args => OnChange(args.Value.ToString()))
                           @onkeypress=@(e=> SearchInputKeyPressed(e)) />
            </RadzenStack>
        </RadzenColumn>
        <RadzenColumn>
            <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.End" Gap="1rem" Wrap="FlexWrap.Wrap">
                <RadzenButton Click=@(args => IrANuevo()) Icon="add" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Large" class="rz-border-radius-10 rz-shadow-10" />
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>


    <RadzenDataList IsLoading=@isLoading
                LoadData=@LoadDataGrig
                Count=@count
                Data="@unidadMedidas"
                TItem="UnidadMedidaDto"
                PageSize="@PageSize"
                PagerHorizontalAlign="HorizontalAlign.Left"
                ShowPagingSummary="true"
                AllowPaging="true">
        <Template Context="UnidadMedidaDto">
            <RadzenCard Style="width: 100%; padding: 0;">
                <RadzenRow Gap="0">
                    <RadzenColumn Size="12" SizeLG="3" Class="rz-p-4 product-title">
                        <RadzenRow>
                            <RadzenColumn>
                                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
                                    <RadzenLink Path="javascript:void(0)" Text="Go to url" onclick="@(()=> Editar(UnidadMedidaDto.Id))"><RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-color-secondary">@(UnidadMedidaDto.Id)</RadzenText>  </RadzenLink>
                                    </RadzenStack>
                                </RadzenColumn>
                                <RadzenColumn>
                                    <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.End" Gap="0">
                                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" Gap="8">
                                            <button type="button" onclick="@(()=> Editar(UnidadMedidaDto.Id))" class="btn btn-secondary"><spam class="fa fa-pencil-square-o" aria-hidden="true"></spam></button>
                                            <button type="button" onclick="@(()=> Detete(UnidadMedidaDto.Id))" class="btn btn-danger"><spam class="fa fa-trash-o" aria-hidden="true"></spam></button>
                                        </RadzenStack>


                                    </RadzenStack>
                                </RadzenColumn>
                            </RadzenRow>

                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeLG="7" Class="rz-p-4">
                            <RadzenRow Gap="0">
                                <RadzenColumn Size="6" SizeMD="6" SizeLG="2">
                                    <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" Class="rz-mb-0">Nombre:</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body2">@(UnidadMedidaDto.Name)</RadzenText>
                                </RadzenColumn>
                                <RadzenColumn Size="6" SizeMD="6" SizeLG="2">
                                    <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" Class="rz-mb-0">Codigo:</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body2">@(UnidadMedidaDto.Code)</RadzenText>
                                </RadzenColumn>

                            </RadzenRow>
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenCard>
            </Template>
        </RadzenDataList>
}

<style>
    .product-title {
        min-height: 72px;
        background-color: var(--rz-secondary-lighter);
    }

    .price-badge {
        font-size: 16px;
        font-weight: bold;
        line-height: 20px;
        padding: 8px;
    }
</style>

@code {
    bool allowVirtualization;
    bool isLoading;
    private List<UnidadMedidaDto>? unidadMedidas;
    private int from = 0;
    private int to = 0;
    private int PageSize = 5;
    int count;
    private string searchCriteria { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        try
        {
            await LoadInitialData();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            AppUtils.ShowNotify(ex.Message, "ERROR", Ns);
        }

    }
    public async void Editar(int id)
    {
        Navigation.NavigateTo($"unidamedidanew/{id}");
    }
    public void IrANuevo()
    {
        Navigation.NavigateTo("unidamedidanew");
    }
    public async Task LoadData(int? from, int? to)
    {
        isLoading = true;
        try
        {
            count = await unidadMedidaService.GetCount(searchCriteria);
            unidadMedidas = await unidadMedidaService.GetAll(from, to, searchCriteria);
        }
        catch (Exception ex)
        {
            AppUtils.ShowNotify($"ERROR : {ex.Message} ", "WARNING", Ns);
        }
        finally
        {
            isLoading = false;
        }

    }
    public async Task LoadDataGrig(LoadDataArgs args)
    {
        var fromTo = AppUtils.GetFromTo(args?.Top, args?.Skip);
        await LoadData(fromTo.From, fromTo.To);
    }
    public async void Detete(int id)
    {
        bool result = false;
        try
        {
            result = await AppUtils.ShowConfirm("Eliminar la unidad de medida", "Está seguro de querer eliminar la unidad de medida?", DialogService);

        }
        catch (Exception ex)
        {
            AppUtils.ShowNotify($"ERROR : {ex.Message} ", "WARNING", Ns);
        }


        if ((bool)result)
        {
            spinnerService.Show();
            try
            {
                await unidadMedidaService.Delete(id);
                await LoadInitialData();
                StateHasChanged();
                AppUtils.ShowNotify("Unidad de medida Eliminada exitósamente", "OK", Ns);
            }
            catch (Exception ex)
            {
                AppUtils.ShowNotify($"ERROR : {ex.Message} ", "WARNING", Ns);
            }
            finally
            {
                spinnerService.Hide();
            }

        }
    }
    public async Task LoadInitialData()
    {
        await LoadData(0, PageSize - 1);
    }
    public async Task Buscar()
    {
        await LoadInitialData();
        StateHasChanged();
    }
    private async void OnChange(string value)
    {
        searchCriteria = value;
        if (string.IsNullOrWhiteSpace(value))
        {
            await Buscar();
        }
    }

    private async Task SearchInputKeyPressed(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await Buscar();
        }
    }


}
