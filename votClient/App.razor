@using CommonLoginComponets.Dominio.Login
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Services;

@inject LazyAssemblyLoader AssemblyLoader
@inject ILogger<App> Logger
<CascadingAuthenticationState>
<Router AppAssembly="@typeof(App).Assembly" OnNavigateAsync="@OnNavigateAsync">
    <Found Context="routeData">
       @* <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />*@
        <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainRadzenLayout)" >
            <NotAuthorized >
                  <RedirectToLogin></RedirectToLogin>
            </NotAuthorized>
            <Authorizing>
               
            </Authorizing>  

        </AuthorizeRouteView>
        <FocusOnNavigate RouteData="@routeData" Selector="h1" />
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainRadzenLayout)">
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>
</CascadingAuthenticationState>

@code{
    private async Task OnNavigateAsync(NavigationContext args)
    {
        try
        {
           
            //if (args.Path.Contains("login") || args.Path=="")
            //{
            //    var assemblies = await AssemblyLoader.LoadAssembliesAsync(
            //        new[] { "CommonLoginComponets.dll" });
            //}
            //if (args.Path.Contains("home"))
            //{
            //    var assemblies = await AssemblyLoader.LoadAssembliesAsync(
            //        new[] { "CommonLoginComponets.dll" });
            //}
            if (args.Path.Contains("productcategory"))
            {
                var assemblies = await AssemblyLoader.LoadAssembliesAsync(
                    new[] { "Component.ProductCategory.wasm" });
            }

            if (args.Path.Contains("unidadmedida"))
            {
                var assemblies = await AssemblyLoader.LoadAssembliesAsync(
                    new[] { "Component.UnidadMedida.wasm" });
            }

            if (args.Path.Contains("productos"))
            {
                var assemblies = await AssemblyLoader.LoadAssembliesAsync(
                    new[] { "Component.Productos.wasm" });
            }

            if (args.Path.Contains("terceros"))
            {
                var assemblies = await AssemblyLoader.LoadAssembliesAsync(
                    new[] { "Component.Terceros.wasm" });
            }
            if (args.Path.Contains("facturas"))
            {
                var assemblies = await AssemblyLoader.LoadAssembliesAsync(
                    new[] { "Component.Facturas.wasm" });
            }
            
            
        }
        catch (Exception ex)
        {
            Logger.LogError("Error: {Message}", ex.Message);
        }
    }
}