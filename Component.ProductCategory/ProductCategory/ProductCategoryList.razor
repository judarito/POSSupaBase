@using CommonBase.Dtos.ProductCategory;
@using CommonBase.Services.ProductCategoryService;
@inject ProductCategoryService productCategoryService


<PageTitle>Categoría de productos</PageTitle>

<h2>Categoría de productos</h2>

<p>En esta pagina puedes gestionar los datos de las categoría de productos.</p>



@if (productCategories == null)
{
    <p><em>Loading...</em></p>
}
else
{


    <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.End" Gap="1rem" Wrap="FlexWrap.Wrap">
        <RadzenButton Text="Nuevo" Icon="add" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Large" Click="@IrANuevo" />
    </RadzenStack>


    <RadzenDataList IsLoading=@isLoading
                LoadData=@LoadDataGrig
                Count=@count
                Data="@productCategories"
                TItem="ProductCategoryDto"
                PageSize="@PageSize"
                PagerHorizontalAlign="HorizontalAlign.Left"
                ShowPagingSummary="true"
                AllowPaging="true">
        <Template Context="ProductCategoryDto">
            <RadzenCard Style="width: 100%; padding: 0;">
                <RadzenRow Gap="0">
                    <RadzenColumn Size="12" SizeLG="3" Class="rz-p-4 product-title">
                        <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-color-secondary">@(ProductCategoryDto.Name)</RadzenText>
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeLG="7" Class="rz-p-4">
                            <RadzenRow Gap="0">
                                <RadzenColumn Size="12" SizeMD="6" SizeLG="2">
                                    <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" Class="rz-mb-0">ID</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body2">@(ProductCategoryDto.Id)</RadzenText>
                                </RadzenColumn>

                            </RadzenRow>
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeLG="2" Class="rz-p-4">
                            <RadzenRow Gap="0">
                                <RadzenColumn Size="12" SizeMD="8" SizeLG="8">
                                    <RadzenButton Text="Editar" Style="width: 100%" Click="@(()=> Editar(ProductCategoryDto.Id))" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8" SizeLG="8">
                                    <RadzenButton Text="Eliminar" Style="width: 100%" Click="@(()=> Detete(ProductCategoryDto.Id))" ButtonStyle="ButtonStyle.Danger" />
                                </RadzenColumn>
                            </RadzenRow>


                        </RadzenColumn>
                    </RadzenRow>
                </RadzenCard>
            </Template>
        </RadzenDataList>
}

<style>
    .product-title {
        min-height: 72px;
        background-color: var(--rz-secondary-lighter);
    }

    .price-badge {
        font-size: 16px;
        font-weight: bold;
        line-height: 20px;
        padding: 8px;
    }
</style>




@code {
    bool allowVirtualization;
    bool isLoading;
    private List<ProductCategoryDto>? productCategories;
    private int from = 0;
    private int to = 0;
    private int PageSize = 5;
    int count;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        try
        {
            await LoadInitialData();
        }
        catch (Exception ex)
        {
            AppUtils.ShowNotify(ex.Message, "ERROR", Ns);
        }

    }

    public async void Editar(int id)
    {
        Navigation.NavigateTo($"productcategorynew/{id}");
    }

    public void IrANuevo()
    {
        Navigation.NavigateTo("productcategorynew");
    }

    public async Task LoadData(int? from, int? to)
    {
        count = await productCategoryService.GetCount();
        productCategories = await productCategoryService.GetAll(from, to);
    }

    public async Task LoadDataGrig(LoadDataArgs args)
    {
        isLoading = true;
        var fromTo = AppUtils.GetFromTo(args?.Top, args?.Skip);
        await LoadData(fromTo.From, fromTo.To);
        isLoading = false;
    }

    public async void Detete(int id)
    {
        var result = await AppUtils.ShowConfirm("Eliminar la categoría de producto", "Está seguro de querer eliminar la categoría de producto?", DialogService);

        if ((bool)result)
        {
            spinnerService.Show();
            try
            {
                await productCategoryService.Delete(id);
                await LoadInitialData();
                StateHasChanged();
                AppUtils.ShowNotify("categoría de producto Eliminada exitósamente", "OK", Ns);
            }
            catch (Exception ex)
            {
                AppUtils.ShowNotify($"ERROR : {ex.Message} ", "WARNING", Ns);
            }
            finally
            {
                spinnerService.Hide();
            }

        }
    }
    public async Task LoadInitialData()
    {
        await LoadData(0, PageSize - 1);
    }
}
