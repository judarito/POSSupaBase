@using System.Text.Json;
@using System.Text.RegularExpressions;
@using CommonBase.Models;
@using CommonBase.Services.Lideres;
@inject ILideresService lideresService
<PageTitle>Líderes</PageTitle>

<h1>Nuevo Líder</h1>

@if (lider == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <RadzenTemplateForm Data="@lider" Submit="@((Lider args) => { Submit(args); })">
        <RadzenRow Gap="2rem" Class="rz-p-0 rz-p-lg-4">
            <RadzenColumn Size="12" SizeMD="11">
                <RadzenStack>
                    <RadzenFieldset Text="Datos del Líder">
                        <RadzenStack Gap="1rem">

                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="2">
                                    <RadzenLabel Text="Nombre" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="9">
                                    <RadzenTextBox Style="width: 100%;" Name="nombre" @bind-Value="lider.Nombre" MaxLength="50" />
                                    <RadzenLengthValidator Component="nombre" Max="50" Text="El nombre debe tener como máximo 50 caracteres." Popup=@popup Style="position: relative" />
                                    <RadzenCustomValidator Component="nombre" Validator="@(() => ValidateSpaces(lider.Nombre))" Text="Nombre es requerido" Popup=@popup Style="position: relative" />
                                </RadzenColumn>
                            </RadzenRow>

                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="2">
                                    <RadzenLabel Text="Cedula" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="9">
                                    <RadzenTextBox Style="width: 100%;" Name="cedula" @bind-Value="lider.Cedula" MaxLength="20" />
                                    <RadzenCustomValidator Component="cedula" Validator="@(() => ValidateSpaces(lider.Cedula))" Text="cedula es requerido" Popup=@popup Style="position: relative" />
                                    <RadzenLengthValidator Component="cedula" Max="20" Text="la cedula debe tener como máximo 20 caracteres." Popup=@popup Style="position: relative" />
                                    <RadzenCustomValidator Component="cedula" Validator="@(() => ValidateOnlyNumber(lider.Cedula))" Text="Solo puede escribir numeros" Popup=@popup Style="position: relative" />
                                </RadzenColumn>
                            </RadzenRow>

                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="2">
                                    <RadzenLabel Text="Telefono" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="9">
                                    <RadzenTextBox Style="width: 100%;" Name="telefono" @bind-Value="lider.Telefono" MaxLength="20" />
                                    <RadzenCustomValidator Component="telefono" Validator="@(() => ValidateSpaces(lider.Telefono))" Text="Telefono es requerido" Popup=@popup Style="position: relative" />
                                    <RadzenLengthValidator Component="telefono" Max="20" Text="El telefono debe tener como máximo 20 caracteres." Popup=@popup Style="position: relative" />
                                    <RadzenCustomValidator Component="telefono" Validator="@(() => ValidateOnlyNumber(lider.Telefono))" Text="Solo puede escribir numeros" Popup=@popup Style="position: relative" />
                                </RadzenColumn>
                            </RadzenRow>

                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="2">
                                    <RadzenLabel Text="Referido" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="9">
                                    <RadzenTextBox Style="width: 100%;" Name="referido" @bind-Value="lider.Referido" MaxLength="30" />
                                    <RadzenLengthValidator Component="referido" Max="30" Text="El Referido debe tener como máximo 30 caracteres." Popup=@popup Style="position: relative" />
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenStack>
                    </RadzenFieldset>

                </RadzenStack>
            </RadzenColumn>

        </RadzenRow>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" Class="rz-mt-8 rz-mb-4">
            <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Icon="save" Text="Save" />
            <RadzenButton ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Large" Icon="cancel" Text="Cancel" Click="@Cancel" />
        </RadzenStack>
    </RadzenTemplateForm>
}



@code {

    [Parameter]
    public int? id { get; set; }

    private Lider? lider;
    bool popup = true;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        lider = new Lider();

        if (id != null && id > 0)
        {
            try
            {
                lider = await lideresService.GetById(id);
            }
            catch (Exception ex)
            {
                AppUtils.ShowNotify(ex.Message, "ERROR", Ns);
            }

        }


    }

    async void Submit(Lider arg)
    {
        var response = arg?.Id != null && arg?.Id > 0 ? await lideresService.Update(arg) : await lideresService.Create(arg);

        if (!response.IsSuccessStatusCode)
        {
            AppUtils.ShowNotify($"{response.ReasonPhrase} : {await response.Content.ReadAsStringAsync()} ", "WARNING", Ns);
            return;
        }

        lider = new Lider();
        AppUtils.ShowNotify("Información guardada de manera exitosa", "OK", Ns);
        Navigation.NavigateTo("lideres");
    }

    void Cancel()
    {
        Navigation.NavigateTo("lideres");
    }

    bool ValidateSpaces(string value)
    {
        if (string.IsNullOrEmpty(value))
        {
            return false;
        }
        return value.Trim().Length > 0;
    }

    bool ValidateOnlyNumber(string value)
    {
        if (string.IsNullOrEmpty(value))
        {
            return false;
        }
        Regex regex = new Regex("^[0-9]+$");
        Match match = regex.Match(value);
        Console.WriteLine(match.Success);
        return match.Success;
    }

}
